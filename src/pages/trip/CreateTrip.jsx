import SelectAddress from "../../components/trip/create-trip/SelectAddress";
import { SelectBudgetOptions, SelectTravelesList } from "../../utils/contant";
import { useState } from "react";
import { Button, TextInput } from "flowbite-react";
import NotificationModal from "../../components/common/NotificationModal";
import { useSelector } from "react-redux";
import { LoadingModal } from "../../components/common/LoadingModal";
import TripService from "../../services/TripService";

export default function CreateTrip() {
  const { user, isAuthenticated } = useSelector((state) => state.user);
  const [formData, setFormData] = useState({});
  const [notification, setNotification] = useState("");
  const [notificationLoading, setNotificationLoading] = useState("");

  const [navigateURL, setNavigateURL] = useState(null);
  const handleInputChange = (name, value) => {
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  const handleChange = (e) => {
    const newValue = e.target.value;
    if (/^[1-5]?$/.test(newValue)) {
      setFormData({ ...formData, noOfDay: newValue });
    }
  };
  const GenerateTrip = async () => {
    setNotification("");
    try {
      if (
        !formData ||
        !formData?.location ||
        !formData?.noOfDay ||
        !formData?.traveler ||
        !formData?.budget
      ) {
        setNotification("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
        return;
      }
      setNotificationLoading(
        "ƒêang t·∫°o chuy·∫øn ƒëi. Vui lo√†ng ƒë·ª£i trong gi√¢y l√°t."
      );
      const res = await TripService.post({ ...formData, userId: user._id });

      setNotificationLoading("");
      if (res.status) {
        setNavigateURL(`/trip/${res.data._id}`);
        setNotification(`T·∫°o th√†nh c√¥ng chuy·∫øn ƒëi`);
      }
      if (!res.status) {
        setNotification(`T·∫°o chuy·∫øn ƒëi th·∫•t b·∫°i`);
      }
    } catch (error) {}
  };

  return (
    <div className="p-3 my-10 max-w-3xl mx-auto">
      <h1></h1>
      <div className="w-full">
        <h2 className="text-3xl font-bold">
          H√£y cho ch√∫ng t√¥i bi·∫øt s·ªü th√≠ch du l·ªãch c·ªßa b·∫°n üèïÔ∏èüå¥
        </h2>
        <p className="mt-3 text-gray-500 text-xl">
          Ch·ªâ c·∫ßn cung c·∫•p m·ªôt s·ªë th√¥ng tin c∆° b·∫£n v√† c√¥ng c·ª• l·∫≠p k·∫ø ho·∫°ch
          chuy·∫øn ƒëi c·ªßa ch√∫ng t√¥i s·∫Ω t·∫°o h√†nh tr√¨nh t√πy ch·ªânh d·ª±a tr√™n s·ªü th√≠ch
          c·ªßa b·∫°n.
        </p>
      </div>
      <div className="mt-16 grid gap-6">
        <div>
          <h2 className="text-xl my-3 font-medium">B·∫°n d·ª± ƒë·ªãnh ƒëi ƒë·∫øn ƒë√¢u?</h2>

          <SelectAddress data={formData} setData={setFormData} />
        </div>
        <div>
          <h2 className="text-xl my-3 font-medium">
            B·∫°n d·ª± ƒë·ªãnh ƒëi du l·ªãch bao nhi√™u ng√†y?
          </h2>
          <TextInput
            placeholder="V√≠ d·ª•: 3"
            type="number"
            require="true"
            value={formData.noOfDay || ""}
            onChange={handleChange}
          />
        </div>
        <div>
          <h2 className="text-xl my-3 font-medium">
            B·∫°n d·ª± ƒë·ªãnh s·∫Ω ƒëi du l·ªãch c√πng ai trong chuy·∫øn phi√™u l∆∞u ti·∫øp theo?
          </h2>
          <div className=" grid grid-cols-4 gap-5 mt-5">
            {SelectTravelesList.map((item) => (
              <div
                key={item.id}
                className={`p-4 border rounded-lg cursor-pointer hover:shadow-xl ${
                  formData?.traveler === item.title &&
                  "border border-black bg-gray-100"
                }`}
                onClick={() => {
                  handleInputChange("traveler", item.title);
                }}
              >
                <h2 className="text-4xl">{item.icon}</h2>
                <h2 className="font-bold">{item.title}</h2>
                <h2>{item.description}</h2>
              </div>
            ))}
          </div>
        </div>
        <div>
          <h2 className="text-xl my-3 font-medium">
            Ng√¢n s√°ch c·ªßa b·∫°n l√† bao nhi√™u?
          </h2>
          <div className=" grid grid-cols-3 gap-5 mt-5">
            {SelectBudgetOptions.map((item) => (
              <div
                key={item.id}
                className={`p-4 border rounded-lg cursor-pointer hover:shadow-xl ${
                  formData?.budget === item.title &&
                  "border border-black bg-gray-100"
                }`}
                onClick={() => {
                  handleInputChange("budget", item.title);
                }}
              >
                <h2 className="text-4xl">{item.icon}</h2>
                <h2 className="font-bold">{item.title}</h2>
                <h2>{item.description}</h2>
              </div>
            ))}
          </div>
        </div>
      </div>
      <Button onClick={GenerateTrip} className="my-10 flex ml-auto">
        T·∫°o chuy·∫øn ƒëi
      </Button>
      {notification && (
        <NotificationModal
          notification={notification}
          navigateTo={navigateURL}
        />
      )}
      {notificationLoading && (
        <LoadingModal notificationLoading={notificationLoading} />
      )}
    </div>
  );
}
